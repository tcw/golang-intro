Praktisk introduksjon til GO

Knowit Sør 

Tom Christian Woods

 
* Hva skal vi se på?

- Introduksjon
- Installasjon
- Tooling (go kommandoen)
- Språket
- Communicating Sequential Processes
- Generell bruk (Biblioteker, Testing og Web tjenester) 
- Konklusjon

* Introduksjon

- Hvem har laget GO?
- Hvorfor ble GO laget?
- Hvilken type språk er GO?
- Hvorfor er ikke GO mer likt 'Haskell'?

.link https://code.google.com/p/go-wiki/wiki/GoUsers Hvem bruker GO idag?

* Installasjon

.link http://golang.org/ GO hjemmeside

Last ned og kjør:

 sudo tar -C /usr/local -xzf go1.4.2.linux-amd64.tar.gz


Lager GOPATH under $HOME/Go:

 mkdir Go
 cd Go
 mkdir src
 mkdir pkg
 mkdir bin

Eksporter:

 export GOROOT=/usr/local/go
 export GOPATH=$HOME/Go
 export GOBIN=$GOPATH/bin
 export PATH=$PATH:$GOROOT/bin:GOBIN


* TOOLING

Hva kan go kommandoen gjøre?

- Kjøre en go fil (*go*run*fil.go*) - eneste som opererer på fil nivå
- Bygge en go fil (*go*build*)
- Installere et go program (*go*install*) som mvn install
- Hente et biblitek fra ekstern kilde (*go*get*http://github.com/tcw/go-prog*)
- Kjøre tester (*go*test*)
- Kjøre benchmarking (*go*test*-bench=.*)
- Kjøre profiling (*go*tool*pprof*fil*cpu.pprof*)

* DEMO - LAG OG KJØR ET GO PROGRAM

- Forklar pakkestruktur
- Lag et hello world eksemple
- Installer programmet
- Vis resultatet av installasjonen
- Kjør programmet

* Språket - Hello world!
.play hello.go

* Språket - Package variabel
.play global_variabel.go

* Språket - Type inference
.play type_inference.go /^func main/,/^}/

* Språket - Ny tildeling
.play reassignment.go /^func main/,/^}/

* Språket - Konstanter
.play constant.go

* Språket - Init
.play init.go

* Språket - Array
.play array.go /^func main/,/^}/

* Språket - Slice
.play slice.go /^func main/,/^}/

* Språket - If Else
.play if.go /^func main/,/^}/

* Språket - Looping
.play for.go /^func main/,/^}/

* Språket - Looping
.play for2.go /^func main/,/^}/

* Språket - Funksjoner
.play fn.go

* Språket - Funksjoner
.play fn1.go

* Språket - Funksjoner
.play fn2.go

* Språket - Funksjoner
.play fn3.go

* Språket - Funksjoner
.play fn4.go

* Språket - Metoder
.play method.go

* Språket - Interface
.play interface.go


* Communicating Sequential Processes (CSP)

- Actor modelen beskrevert i 1973 av Hewitt, Bishop og Steiger
- CSP beskrevet i 1978 av C. A. R. Hoare
- CSP er et meldingsystem hvor beskjeder er sendt over kanaler

Forskjeller mellom CSP og Actor modellen

- CSP prosesser er anonyme
- CSP er hovedsaklig synkront

* CSP

Består av Goroutines og Channels

Goroutines

- Uavhengig kjørende fuksjon
- Veldig billige lettvekts tråder (ikke ekte tråder)
- Har egen stack

Channel

- Kan tenkes på som en kø med eller uten elementer

* CSP

*Goroutines*

Kjør en goroutine

 go fn()

*Channel*

Lag en channel

 c := make(chan int)

Sende på en channel

 c <- 1

Motta på en channel

 value = <-c


* CSP - Go routines
.play csp1.go

* CSP - Go routines
.play csp2.go 

* CSP - Go routines
.play csp3.go 

* CSP - Go routines
.play csp4.go 

* CSP select

* Demo Lag et bibliotek 
.code matte.go

* Testing 

.link http://onsi.github.io/ginkgo/ Grikgo
.link https://github.com/stretchr/testify testify

* Demo - Bruk et 3-parts test bibliotek 
.code test1_test.go

* Demo - Benchmarking 
.code bench1_test.go

* Web utvikling

- Veldig mange web rammeverk for GO

Vi skal se litt på 

.link http://martini.codegangsta.io/ Martini
.link https://github.com/codegangsta/negroni Negroni

* Konklusjon

* Q & A
